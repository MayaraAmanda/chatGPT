import java.io.{ByteArrayInputStream, ByteArrayOutputStream, ObjectInputStream, ObjectOutputStream}

def deepCopy[T](obj: T): T = {
  val byteOut = new ByteArrayOutputStream()
  val objOut = new ObjectOutputStream(byteOut)
  objOut.writeObject(obj)
  objOut.close()
  
  val byteIn = new ByteArrayInputStream(byteOut.toByteArray)
  val objIn = new ObjectInputStream(byteIn)
  val copiedObj = objIn.readObject().asInstanceOf[T]
  objIn.close()
  
  copiedObj
}


Neste exemplo, a função deepCopy recebe um objeto obj como parâmetro e retorna uma cópia profunda desse objeto. Através da serialização e desserialização, uma nova instância do objeto é criada, garantindo uma cópia independente de todos os seus campos e referências.

Lembre-se de que essa abordagem só funcionará corretamente se todos os objetos contidos na estrutura que você está copiando forem serializáveis. Caso contrário, você pode precisar implementar uma lógica personalizada para copiar cada objeto individualmente, considerando suas particularidades.





